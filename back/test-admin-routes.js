/**
 * Script de test pour v√©rifier les routes admin apr√®s correction
 */

const mongoose = require('mongoose');
const Doctor = require('./models/Doctor');
const User = require('./models/User');
require('dotenv').config();

async function testAdminRoutes() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/doctors_app');
    console.log('‚úÖ Connexion MongoDB r√©ussie');

    // Test 1: V√©rifier la structure du mod√®le Doctor
    console.log('\nüîç Test 1: Structure du mod√®le Doctor');
    const doctorSchema = Doctor.schema.paths;
    console.log('Champs disponibles dans Doctor:');
    Object.keys(doctorSchema).forEach(field => {
      if (field.includes('user') || field.includes('User')) {
        console.log(`  - ${field}: ${doctorSchema[field].instance || 'ObjectId'}`);
      }
    });

    // Test 2: V√©rifier s'il y a des m√©decins dans la base
    console.log('\nüîç Test 2: M√©decins existants');
    const doctorCount = await Doctor.countDocuments();
    console.log(`Nombre de m√©decins: ${doctorCount}`);

    if (doctorCount > 0) {
      // Test 3: Tester une requ√™te populate
      console.log('\nüîç Test 3: Test populate avec userId');
      try {
        const doctor = await Doctor.findOne().populate('userId', 'firstName lastName email');
        if (doctor) {
          console.log('‚úÖ Populate r√©ussi avec userId');
          console.log(`M√©decin: ${doctor.userId?.firstName} ${doctor.userId?.lastName}`);
        } else {
          console.log('‚ö†Ô∏è Aucun m√©decin trouv√© pour le test populate');
        }
      } catch (error) {
        console.log('‚ùå Erreur populate:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è Aucun m√©decin dans la base pour tester populate');
    }

    // Test 4: V√©rifier les utilisateurs avec r√¥le doctor
    console.log('\nüîç Test 4: Utilisateurs avec r√¥le doctor');
    const doctorUsers = await User.countDocuments({ role: 'doctor' });
    console.log(`Utilisateurs avec r√¥le doctor: ${doctorUsers}`);

    console.log('\n‚úÖ Tests termin√©s avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

// Ex√©cuter les tests
testAdminRoutes();
