const mongoose = require('mongoose');
const User = require('../models/User');
require('dotenv').config();

async function createAdmin() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/doctors_app');
    console.log('‚úÖ Connexion MongoDB r√©ussie');

    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await User.findOne({ role: 'admin' });
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Un administrateur existe d√©j√†:', existingAdmin.email);
      console.log('üóëÔ∏è  Suppression de l\'administrateur existant...');
      await User.deleteOne({ role: 'admin' });
      console.log('‚úÖ  Administrateur supprim√© avec succ√®s');
    }

    // Cr√©er l'administrateur
    const adminData = {
      firstName: 'cheikh',
      lastName: 'dillo',
      phone: '+221777750078',
      email: process.env.ADMIN_EMAIL || 'doctors@app.sn',
      password: process.env.ADMIN_PASSWORD || 'passer@1',
      role: 'admin',
      isPhoneVerified: true,
      isEmailVerified: true,
      isActive: true,
      language: 'fr'
    };

    const admin = new User(adminData);
    await admin.save();

    console.log('üéâ Administrateur cr√©√© avec succ√®s !');
    console.log('üìß Email:', admin.email);
    console.log('üì± T√©l√©phone:', admin.phone);
    console.log('üîë Mot de passe:', process.env.ADMIN_PASSWORD || 'passer@1');
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANT: Changez le mot de passe apr√®s la premi√®re connexion !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'admin:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion MongoDB ferm√©e');
    process.exit(0);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  createAdmin();
}

module.exports = createAdmin;
